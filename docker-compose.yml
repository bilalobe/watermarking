services:
  # Django Application with Daphne ASGI Server
  web:
    build: .
    container_name: watermarker_web
    command: daphne -b 0.0.0.0 -p 8000 watermarker.asgi:application
    volumes:
      - ./entrypoint.sh:/app/entrypoint.sh
      - ./watermarker:/app
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - watermarker_network
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=8000"
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/metrics/', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: watermarker_db
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - watermarker_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Channels and Caching
  redis:
    image: redis/redis-stack-server:7.2.0-v18
    container_name: watermarker_redis
    command: >
      redis-stack-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --tcp-keepalive 300
      --timeout 0
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - watermarker_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Insight for Redis Management
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: watermarker_redis_insight
    ports:
      - "8001:8001"
    volumes:
      - redis_insight_data:/db
    environment:
      - REDIS_HOSTS=local:redis:6379:${REDIS_PASSWORD}
      - RIPORT=8001
      - RIHOST=0.0.0.0
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - watermarker_network

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: watermarker_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - watermarker_network

  # Grafana for Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: watermarker_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - watermarker_network

  # pgAdmin for PostgreSQL Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: watermarker_pgadmin
    ports:
      - "5051:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@watermarker.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin123}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
      - PGADMIN_LISTEN_ADDRESS=0.0.0.0
      - PGADMIN_LISTEN_PORT=80
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - watermarker_network
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost/misc/ping', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: watermarker_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    depends_on:
      web:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - watermarker_network

volumes:
  postgres_data:
  redis_data:
  redis_insight_data:
  prometheus_data:
  grafana_data:
  static_volume:
  pgadmin_data:
  media_volume:

networks:
  watermarker_network:
    driver: bridge
